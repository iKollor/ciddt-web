---
import '../../styles/GlobalVariables.scss';

import Popup from '@components/buttons/Popup';
const registrationToken = Astro.url.searchParams.get('token');

if (registrationToken == null) {
	return Astro.redirect('/ciddt-admin/login');
}
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
	</head>
	<body class="h-screen overflow-hidden flex items-center justify-center bg-black">
		<div class="container max-w-full mx-auto md:py-24 px-6">
			<div class="max-w-sm mx-auto px-6">
				<div class="relative flex flex-wrap">
					<div class="w-full relative">
						<div class="md:mt-6">
							<h1 class="text-center font-bold text-red-400 text-3xl">Formulario de Registro</h1>
							<p class="text-center font-base text-gray text-sm mt-5">
								Completa el siguiente formulario para continuar
							</p>
							<form
								class="mt-8"
								x-data="{ username: '', email: '', password: '', password_confirm: '', terms: false, showPasswordValidator: false, init() { this.email = JSON.parse(localStorage.getItem('cachedEmail') || '{}').email || ''; }, isValid() { return this.username !== '' && this.email !== '' && this.password === this.password_confirm && this.password.length > 7 && this.terms; } }"
								x-init="init()"
								action="#"
								id="register-form"
								method="POST"
							>
								<div class="mx-auto max-w-lg">
									<div class="py-1">
										<span class="px-1 text-sm text-gray font-semibold">Username</span>
										<input
											id="username"
											name="username"
											type="username"
											autocomplete="username"
											x-model="username"
											placeholder=""
											type="text"
											class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 sm:text-sm sm:leading-6"
											required
										/>
									</div>
									<div class="py-1">
										<span class="px-1 text-sm text-gray font-semibold">Email</span>
										<input
											id="email"
											name="email"
											type="email"
											autocomplete="email"
											x-model="email"
											placeholder=""
											class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 sm:text-sm sm:leading-6"
											required
											readonly
										/>
									</div>
									<div class="py-1">
										<span class="px-1 text-sm text-gray font-semibold">Password</span>
										<input
											id="password"
											name="password"
											type="password"
											autocomplete="password"
											placeholder=""
											x-model="password"
											x-on:focus="showPasswordValidator = true"
											x-on:blur="showPasswordValidator = (password !== '' || password_confirm !== '')"
											class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 sm:text-sm sm:leading-6"
											required
										/>
									</div>
									<div class="py-1">
										<span class="px-1 text-sm text-gray font-semibold">Password Confirm</span>
										<input
											placeholder=""
											type="password"
											x-model="password_confirm"
											x-on:focus="showPasswordValidator = true"
											x-on:blur="showPasswordValidator = (password !== '' || password_confirm !== '')"
											class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 sm:text-sm sm:leading-6"
											required
										/>
									</div>
									<div
										id="password_validator"
										x-show="showPasswordValidator"
										x-transition:enter="transition ease-out duration-300"
										x-transition:enter-start="transform opacity-0 scale-95"
										x-transition:enter-end="transform opacity-100 scale-100"
										x-transition:leave="transition ease-in duration-300"
										x-transition:leave-start="transform opacity-100 scale-100"
										x-transition:leave-end="transform opacity-0 scale-95"
										class="overflow-hidden mt-5"
									>
										<ul class="w-full">
											<li class="flex items-center py-1">
												<div
													:class="{'bg-green-700 text-white': password == password_confirm && password.length > 0, 'bg-red-400 text-white':password != password_confirm || password.length == 0}"
													class="rounded-full p-1 fill-current transition"
												>
													<svg
														class="w-4 h-4"
														fill="none"
														viewBox="0 0 24 24"
														stroke="currentColor"
													>
														<path
															x-show="password == password_confirm && password.length > 0"
															stroke-linecap="round"
															stroke-linejoin="round"
															stroke-width="2"
															d="M5 13l4 4L19 7"></path>
														<path
															x-show="password != password_confirm || password.length == 0"
															stroke-linecap="round"
															stroke-linejoin="round"
															stroke-width="2"
															d="M6 18L18 6M6 6l12 12"></path>
													</svg>
												</div>
												<span
													:class="{'text-green-700': password == password_confirm && password.length > 0, 'text-red-400':password != password_confirm || password.length == 0}"
													class="font-medium text-sm ml-3 transition"
													x-text="password == password_confirm && password.length > 0 ? 'Passwords match' : 'Passwords do not match' "
												></span>
											</li>
											<li class="flex items-center py-1">
												<div
													:class="{'bg-green-700 text-white': password.length > 7, 'bg-red-400 text-white':password.length <= 7 }"
													class="rounded-full p-1 fill-current transition"
												>
													<svg
														class="w-4 h-4"
														fill="none"
														viewBox="0 0 24 24"
														stroke="currentColor"
													>
														<path
															x-show="password.length > 7"
															stroke-linecap="round"
															stroke-linejoin="round"
															stroke-width="2"
															d="M5 13l4 4L19 7"></path>
														<path
															x-show="password.length <= 7"
															stroke-linecap="round"
															stroke-linejoin="round"
															stroke-width="2"
															d="M6 18L18 6M6 6l12 12"></path>
													</svg>
												</div>
												<span
													:class="{'text-green-700': password.length > 7, 'text-red-400':password.length <= 7 }"
													class="font-medium text-sm ml-3 transition"
													x-text="password.length > 7 ? 'The minimum length is reached' : 'At least 8 characters required' "
												></span>
											</li>
										</ul>
									</div>
									<div class="flex justify-start">
										<label class="block text-gray font-bold my-4 flex items-center">
											<input
												class="leading-loose text-pink-600 top-0"
												type="checkbox"
												x-model="terms"
												required
											/>
											<span class="ml-2 text-sm py-2 text-gray text-left font-normal"
												>Acepta los
												<a
													href="/misc/Terms-Conditions.md"
													class="text-gray border-b-2 border-gray-400 hover:border-gray-100 hover:text-gray-100"
												>
													Terminos y condiciones del sitio
												</a>y
												<a
													href="/misc/Privacy-Policy.md"
													class="text-gray border-b-2 border-gray-400 hover:border-gray-100 hover:text-gray-100"
												>
													la política de uso de datos e información.</a
												>
											</span>
										</label>
									</div>
									<button
										type="submit"
										:class="{'bg-red-400 hover:bg-red-700': isValid(), 'bg-gray-400 cursor-not-allowed': !isValid()}"
										:disabled="!isValid()"
										class="flex text-center items-center justify-center mt-3 text-lg font-semibold w-full text-white rounded-lg px-6 py-3 shadow-xl transition"
									>
										<span class="loader" id="button__loader"></span>
										<span class="button__content" id="button__content">Registro</span></button
									>
									<Popup client:only />
								</div>
							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
	</body>
	<script>
		import { registerNewUser } from 'frontend/src/firebase/login';
		import { popupStore } from 'frontend/src/hooks/popupStores';

		const buttonContent = document.querySelector('#button__content') as HTMLSpanElement;
		const buttonLoader = document.querySelector('#button__loader') as HTMLSpanElement;

		const emailInput = document.querySelector('#email') as HTMLInputElement;
		emailInput.addEventListener('onchange', (e) => {
			e.preventDefault();
		});

		const form = document.querySelector('form') as HTMLFormElement;
		form.addEventListener('submit', async (e) => {
			e.preventDefault();
			const fromData = new FormData(form);
			const email = fromData.get('email')?.toString();
			const password = fromData.get('password')?.toString();
			const username = fromData.get('username')?.toString();
			const queryParams = new URLSearchParams(window.location.search);
			const registrationToken = queryParams.get('token'); // 'token' es el nombre del parámetro en la URL

			if (!email || !password || !username || !registrationToken) {
				popupStore.set({
					visible: true,
					message: 'Datos inválidos',
					type: 'danger',
					title: 'Error en Registro',
				});
				return;
			} else {
				try {
					buttonContent?.setAttribute('style', 'display: none');
					buttonLoader?.setAttribute('style', 'display: block');
					const response = await registerNewUser(registrationToken, username, email, password);
					popupStore.set({
						visible: true,
						message: response.message,
						type: response.type,
						title: response.title,
					});
					if (response.type == 'success' && !popupStore.get().visible) {
						window.location.assign('/ciddt-admin/login');
					}
				} catch (error: any) {
					buttonContent?.setAttribute('style', 'display: block');
					buttonLoader?.setAttribute('style', 'display: none');
					popupStore.set({
						visible: true,
						message: error.message || 'Ocurrió un error desconocido',
						type: 'danger',
						title: 'Error en Registro',
					});
				} finally {
					buttonContent?.setAttribute('style', 'display: block');
					buttonLoader?.setAttribute('style', 'display: none');
				}
			}
		});
	</script>
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const registrationToken = new URLSearchParams(window.location.search).get('token');
			if (!registrationToken) {
				window.location.href = '/ciddt-admin/login';
			}

			const serverUrl = import.meta.env.PUBLIC_SERVER_URL;
			const emailInput = document.getElementById('email') as HTMLInputElement;

			async function fetchEmail() {
				try {
					const response = await fetch(`${serverUrl}/verifyToken?token=${registrationToken}`);
					if (response.ok) {
						const data = await response.json();
						emailInput.value = data.email;

						// Almacenar en localStorage junto con el token como un objeto JSON
						localStorage.setItem(
							'cachedEmail',
							JSON.stringify({ email: data.email, token: registrationToken }),
						);
					} else {
						throw new Error('Error fetching email');
					}
				} catch (error) {
					console.error(error);
					localStorage.removeItem('cachedEmail');
					window.location.href = '/ciddt-admin/login';
				}
			}

			try {
				const cachedData = JSON.parse(localStorage.getItem('cachedEmail') || '{}');

				// Verificar si el email almacenado corresponde al token actual
				if (cachedData.token === registrationToken && cachedData.email) {
					emailInput.value = cachedData.email;
				} else {
					fetchEmail();
				}
			} catch (error) {
				console.error('Error parsing cached email from localStorage:', error);
				// Si hay un error en el parseo, se hace fetch del email
				fetchEmail();
			}
		});
	</script>
</html>
