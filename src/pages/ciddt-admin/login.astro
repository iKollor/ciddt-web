---
import '../../styles/GlobalVariables.scss';

import Popup from '@components/buttons/Popup';
import InputPopup from '@components/ciddt-admin/InputPopup';
import logo from '@public/svg/isotipo_blanco.svg';
import Image from 'astro/components/Image.astro';
import { getAuth } from 'firebase-admin/auth';

import { app } from '../../firebase/server';

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has('session')) {
	const sessionCookie = Astro.cookies.get('session')?.value;
	if (sessionCookie != null) {
		try {
			const decodedCookie = await auth.verifySessionCookie(sessionCookie);
			if (decodedCookie != null) {
				return Astro.redirect('/ciddt-admin/dashboard');
			}
		} catch (error) {
			// En caso de error (como una sesión expirada), borra la cookie
			Astro.cookies.delete('session');
		}
	}
}
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
		<title>CIDDT | Admin</title>
	</head>

	<body class="bg-edgewater-950">
		<div class="flex min-h-full flex-col justify-center px-6 py-16 lg:px-8 text-center">
			<div class="sm:mx-auto sm:w-full sm:max-w-sm">
				<Image class="mx-auto h-10 w-auto" src={logo} alt="ciddt-web" />
				<h2 class="mt-5 text-center text-2xl font-bold leading-9 tracking-tight text-white">Admin Panel</h2>
			</div>
			<>
				<div class="mt-5 sm:mx-auto sm:w-full sm:max-w-sm flex flex-col items-center content-center">
					<form class="space-y-6 w-full" action="#" id="login-form" method="POST">
						<div>
							<div class="flex items-center justify-between">
								<label for="email" class="block text-sm font-medium leading-6 text-gray"> Email</label>
							</div>
							<div class="mt-2">
								<input
									id="email"
									name="email"
									type="email"
									autocomplete="email"
									required
									class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
								/>
							</div>
						</div>

						<div>
							<div class="flex items-center justify-between">
								<label for="password" class="block text-sm font-medium leading-6 text-gray">
									Contraseña</label
								>
							</div>
							<div class="mt-2">
								<input
									id="password"
									name="password"
									type="password"
									autocomplete="current-password"
									required
									class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 sm:text-sm sm:leading-6"
								/>
							</div>
						</div>

						<div>
							<button
								id="login_button"
								type="submit"
								class="flex w-full justify-center rounded-md bg-red px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-red-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 transition"
							>
								<span class="loader" id="button__loader"></span>
								<span class="button__content" id="button__content"> Iniciar Sesión</span>
							</button>
						</div>
					</form>
					<div class="mt-10 text-center text-sm text-gray-500">
						<button
							class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded inline-flex items-center transition"
							id="fb_login_button"
						>
							<span class="loader" id="fb_button__loader"></span>
							<span class="button__content" id="fb_button__content">
								<i class="fab fa-facebook-f mr-2"></i> Regístrate o Inicia Sesión con Facebook</span
							>
						</button>
						<p class="text-gray text-sm mt-5 text-center">
							Antes de registrarse por primera vez por Facebook se enviara un correo al administrador
						</p>
					</div>
					<Popup client:only />
					<InputPopup client:only />
				</div>
			</>
			<div class="flex justify-center text-center mt-5">
				<a class="text-gray text-[10px] mr-5 hover:text-white transition" href="/misc/Privacy-Policy.md"
					>Política de Privacidad</a
				>
				<a class="text-gray text-[10px] hover:text-white transition" href="/misc/Terms-Conditions.md"
					>Términos y Condiciones</a
				>
			</div>
		</div>
	</body>
	<script>
		import { browserLocalPersistence, signInWithEmailAndPassword } from 'firebase/auth';
		import { auth } from '../../firebase/client';
		import { popupStore } from 'src/hooks/popupStores';
		import { loginWithFacebook } from 'src/firebase/login';

		auth.setPersistence(browserLocalPersistence);

		const form = document.querySelector('form') as HTMLFormElement;
		const buttonLogin = document.querySelector('#login_button') as HTMLButtonElement;

		const buttonContent = document.querySelector('#button__content') as HTMLSpanElement;
		const buttonLoader = document.querySelector('#button__loader') as HTMLSpanElement;

		form.addEventListener('submit', async (e) => {
			e.preventDefault();
			const formData = new FormData(form);
			const email = formData.get('email')?.toString();
			const password = formData.get('password')?.toString();

			if (!email || !password) {
				return;
			} else if (email != null && password != null) {
				try {
					buttonLogin.disabled = true;
					buttonContent?.setAttribute('style', 'display: none');
					buttonLoader?.setAttribute('style', 'display: block');
					const userCredential = await signInWithEmailAndPassword(auth, email, password);
					const idToken = await userCredential.user.getIdToken();
					const response = await fetch('/api/auth/signin', {
						method: 'GET',
						headers: {
							Authorization: `Bearer ${idToken}`,
						},
					});
					if (response.redirected) {
						popupStore.set({
							visible: true,
							message: 'Inicio de Sesión Exitoso, bienvenido ' + userCredential.user.displayName,
							type: 'success',
							title: 'Inicio de Sesión',
						});
						window.location.assign(response.url);
					} else {
						buttonContent?.setAttribute('style', 'display: block');
						buttonLoader?.setAttribute('style', 'display: none');
						popupStore.set({
							visible: true,
							message: 'Ocurrió un error desconocido',
							type: 'danger',
							title: 'Error en el Inicio de Sesión',
						});
					}
				} catch (error: any) {
					buttonContent?.setAttribute('style', 'display: block');
					buttonLoader?.setAttribute('style', 'display: none');
					if (
						error ===
						'FirebaseError: [code=unavailable]: Failed to get document because the client is offline.'
					) {
						return {
							visible: true,
							type: 'danger',
							title: 'Error en el Inicio de Sesión',
							message: `No se pudo conectar con el servidor, por favor intente nuevamente en unos segundos o recargue la página`,
						};
					}
					if (error.code === 'auth/invalid-credential') {
						return popupStore.set({
							visible: true,
							message: 'Email o Contraseña incorrectos',
							type: 'danger',
							title: 'Error en el Inicio de Sesión',
						});
					}
					popupStore.set({
						visible: true,
						message: error.message || 'Ocurrió un error desconocido',
						type: 'danger',
						title: 'Error en el Inicio de Sesión',
					});
				} finally {
					buttonLogin.disabled = false;
				}
			}
		});

		const FBbutton = document.querySelector('#fb_login_button') as HTMLButtonElement;
		const FBbuttonContent = document.querySelector('#fb_login_button #fb_button__content');
		const FBbuttonLoader = document.querySelector('#fb_login_button #fb_button__loader');

		const handleFacebookLogin = () => {
			// Cambia el contenido del botón a un icono de carga
			FBbuttonContent?.setAttribute('style', 'display: none');
			FBbuttonLoader?.setAttribute('style', 'display: block');
			if (FBbutton != null) {
				FBbutton.disabled = true;
				loginWithFacebook()
					.then((response) => {
						// Restablece el contenido del botón
						FBbuttonContent?.setAttribute('style', 'display: block');
						FBbuttonLoader?.setAttribute('style', 'display: none');
						if (response != null) {
							popupStore.set({
								visible: true,
								message: response.message,
								type: response.type,
								title: response.title,
							});
						} else {
							popupStore.set({
								visible: true,
								message: 'Ocurrió un error inesperado',
								type: 'danger',
								title: 'Error en el Inicio de Sesión',
							});
						}
					})
					.catch((error) => {
						FBbuttonContent?.setAttribute('style', 'display: block');
						FBbuttonLoader?.setAttribute('style', 'display: none');
						console.log(error);
						popupStore.set({
							visible: true,
							message: 'Ocurrió un error inesperado',
							type: 'danger',
							title: 'Error en el Inicio de Sesión',
						});
					})
					.finally(() => {
						FBbutton.disabled = false;
					});
			}
		};
		FBbutton?.addEventListener('click', handleFacebookLogin);
	</script>
</html>
